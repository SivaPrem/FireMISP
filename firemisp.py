#!/usr/bin/env python


# FireMisp - Python script for pushing FireEye json alerts
# into MISP over http
#
# Alexander Jaeger (deralexxx)
#
#
#
# Based on the idea of:
# Please see: https://github.com/spcampbell/firestic
#

import ConfigParser
import logging
from BaseHTTPServer import BaseHTTPRequestHandler
from BaseHTTPServer import HTTPServer
from SocketServer import ThreadingMixIn
import simplejson as json
from pymisp import PyMISP
import sys

from pyFireEyeAlert import pyFireEyeAlert

config = ConfigParser.RawConfigParser()
config.read('config.cfg')

# set config values
misp_url = config.get('MISP', 'misp_url')
misp_key = config.get('MISP', 'misp_key')
misp_verifycert = config.getboolean('MISP', 'misp_verifycert')

firemisp_ip = config.get('FireMisp', 'httpServerIP')
firemisp_port = config.getint('FireMisp', 'httpServerPort')
firemisp_logfile = config.get('FireMisp', 'logFile')


#init logger
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def init_misp(url, key):
    """

    :param url:
    :type url:
    :param key:
    :type key:
    :return:
    :rtype:
    """
    return PyMISP(url, key, misp_verifycert, 'json')


class MyRequestHandler(BaseHTTPRequestHandler):

    # ---------- GET handler to check if httpserver up ----------
    def do_GET(self):
        pingresponse = {"name": "FireMisp is up"}
        if self.path == "/ping":
            self.send_response(200)
            self.send_header("Content-type:", "text/html")
            self.wfile.write("\n")
            json.dump(pingresponse, self.wfile)

    # -------------- POST handler: where the magic happens --------------
    def do_POST(self):
        # get the posted data and remove newlines
        data = self.rfile.read(int(self.headers.getheader('Content-Length')))
        clean = data.replace('\n', '')
        theJson = json.loads(clean)

        self.send_response(200)
        self.end_headers()
        #processAlert(theJson)
        # deal with multiple alerts embedded as an array
        if isinstance(theJson['alert'], list):
#            alertJson = theJson
#            del alertJson['alert']
            for element in theJson['alert']:
                alertJson = {}  # added for Issue #4
                alertJson['alert'] = element
                logger.info("Processing FireEye Alert: " + str(alertJson['alert']['id']))
                processAlert(alertJson)
        else:
            logger.debug("Processing FireEye Alert: " + str(theJson['alert']['id']))
            processAlert(theJson)

# ---------------- end class MyRequestHandler ----------------


# ---------------- Class handles requests in a separate thread. ----------------

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
	pass

# ---------------- end class ThreadedHTTPServer ----------------



def processAlert(theJson):

    #create pyFire Instance of the json
    fireinstance = pyFireEyeAlert(theJson)

    # This comment will be added to every attribute for reference
    auto_comment = "Auto generated by FireMisp "+ (fireinstance.alert_id)

    # create a MISP event

    logger.debug("alert %s ",fireinstance.alert_id)

    has_previous_event = True

    #TODO: de-duplication is still an issue

    #check if event already exists based on alert id
    if fireinstance.alert_id:
        logger.debug("searching for %s",fireinstance.alert_id)
        result = misp.search_all(fireinstance.alert_id)

    if fireinstance.alert_url:
        from urllib import quote

        logger.debug("searching for alert_url %s",fireinstance.alert_url)

        result2 = misp.search_all(quote(fireinstance.alert_url))

        logger.debug("searching for ma_id %s", fireinstance.alert_ma_id)

        result3 = misp.search_all(quote(fireinstance.alert_ma_id))

    previous_event=''
    logger.debug("%s %s",result,result2)

    # this looks hacky but it to avoid exceptions if there is no ['message within the result']
    if 'message' in result:
        if result['message'] == 'No matches.':
            logger.error("No previous event found")
            # has really no event
            has_previous_event = False
    if 'message' in result2:
        if result2['message'] == 'No matches.':
            # has really no event
            has_previous_event = False

    if 'message' in result3:
        if result3['message'] == 'No matches.':
            # has really no event
            has_previous_event = False

    elif 'Event' in result:
        for e in result['response']:
            previous_event = e['Event']['id']
            logger.debug("found an event %s based on alert id %s", previous_event, fireinstance.alert_id)
            break
        # event in string one found
    elif 'Event' in result2:
        for e in result2['response']:
            previous_event = e['Event']['id']
            logger.debug("found an event %s based on alert url %s", previous_event,fireinstance.alert_url)
            break
    elif 'Event' in result3:
        for e in result3['response']:
            previous_event = e['Event']['id']
            logger.debug("found an event %s based on alert url %s", previous_event, fireinstance.alert_ma_id)
            break


    '''

    except ValueError:
        logger.error("Unexpected error maybe event not there? %s",sys.exc_info()[0])

    # or based on ma_id https: // fireeye.rz - c007 - j650.basf - ag.de / event_stream / events_for_bot?ma_id = 17184602
     and previous_event !='':

        logger.debug("checking for alert url: %s",fireinstance.alert_url)

        logger.debug("No previous Alert it found")
        try:
            for e in result2['response']:
                previous_event = e['Event']['id']
                logger.debug("found an event based on alert url %s", previous_event)
                break
        except ValueError:
            logger.error("Unexpected error maybe event not there? %s", sys.exc_info()[0])
    else:
        logger.info("No Alert Url")

        '''

    if previous_event !='':
        logger.debug("Will append my data to: %s",previous_event)
        event = misp.get(str(previous_event)) # not get_event
        #r = result.json()
        #
    else:
        logger.debug("Will create a new event for it")
        #TODO: set occured day
        # misp is expecting: datetime.date.today().isoformat()
        if fireinstance.occured:
            logger.debug("Date will be %s",fireinstance.occured)
            #event = misp.new_event(0, 2, 0, "Auto generated by FireMisp " + fireinstance.alert_id,str(fireinstance.occured))
            event = misp.new_event(0, 2, 0, "Auto generated by FireMisp " + fireinstance.alert_id)

        else:
            event = misp.new_event(0, 2, 0, "Auto generated by FireMisp " + fireinstance.alert_id)


        #event = misp.new_event(0,)


    # START THE MAPPING here

    #general info that should be there in every alert
    #internal reference the alert ID
    misp.add_internal_text(event,fireinstance.alert_id,False,auto_comment)

    #TLP change it if you want to change default TLP
    misp.add_tag(event,"tlp:amber")

    # General detected by a security system. So reflect in a tag
    misp.add_tag(event, "veris:discovery_method=\"Int - security alarm\"")

    # Severity Tagging

    if fireinstance.alert_severity:
        if fireinstance.alert_severity == 'majr':
            misp.add_tag(event,"csirt_case_classification:criticality-classification=\"1\"")
            #upgrade Threat level if set already
            misp.change_threat_level(event,1)
        elif fireinstance.alert_severity == 'minr':
            misp.add_tag(event, "csirt_case_classification:criticality-classification=\"3\"")
            misp.add_tag(event, "veris:impact:overall_rating = \"Insignificant\"")
            misp.change_threat_level(event,3)
        else:
            misp.add_tag(event, "csirt_case_classification:criticality-classification=\"3\"")
            misp.add_tag(event, "veris:impact:overall_rating = \"Unknown\"")
            misp.change_threat_level(event,4)


    # Url of the original Alert
    if fireinstance.alert_url:
        misp.add_internal_link(event, fireinstance.alert_url, False, auto_comment)

    #infos about the product detected it
    if fireinstance.product:
        if fireinstance.product == 'EMAIL_MPS':
            misp.add_tag(event, "veris:action:social:vector=\"Email\"")
        elif fireinstance.product == 'Web MPS':
            misp.add_tag(event, "veris:action:malware:vector=\"Web drive-by\"")

    # if attack was by E-Mail

    if fireinstance.attacker_email:
        misp.add_email_src(event,fireinstance.attacker_email,False,auto_comment)

    if fireinstance.mail_subject:
        misp.add_email_subject(event, fireinstance.mail_subject,False,auto_comment)

    if fireinstance.victim_email:
        misp.add_email_dst(event, fireinstance.victim_email,'Payload delivery',False,auto_comment)

    if fireinstance.malware_md5:
        logger.debug("Malware within the event %s",fireinstance.malware_md5)

        misp.add_hashes(event,"Payload delivery",fireinstance.malware_file_name,fireinstance.malware_md5,None,None,None,auto_comment,False)

    if fireinstance.malware_http_header:
        misp.add_traffic_pattern(event,fireinstance.malware_http_header,'Network activity',False,auto_comment)

    if fireinstance.alert_src_ip:
        misp.add_target_machine(event,fireinstance.alert_src_ip,False,auto_comment,None)

    if fireinstance.alert_src_host:
        misp.add_target_machine(event,fireinstance.alert_src_host,False,auto_comment,None)

    if fireinstance.c2services:
        misp.add_domain(event,fireinstance.c2services,'Network activity',True,auto_comment,None)




def main():
    server = ThreadedHTTPServer((firemisp_ip, firemisp_port), \
									MyRequestHandler)
    logger.info("Starting HTTP server %s %s",firemisp_ip,firemisp_port)
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        logger.error("HTTP Server stopped")


if __name__ == "__main__":

    misp = init_misp(misp_url, misp_key)

    #clean the database for test purposes
    '''for i in range (200,1348,1):
        misp.delete_event(i)
    exit()
'''

    logging.basicConfig(level=logging.WARNING,
                        filename=firemisp_logfile,
                        format='%(asctime)s - %(levelname)s - %(message)s')
    main()
